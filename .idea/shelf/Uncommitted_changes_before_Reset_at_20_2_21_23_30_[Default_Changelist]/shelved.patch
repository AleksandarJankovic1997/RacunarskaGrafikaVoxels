Index: src/graphics3d/scenes/TestCSG.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphics3d.scenes;\n\nimport graphics3d.*;\nimport graphics3d.solids.Ball;\nimport graphics3d.solids.HalfSpace;\nimport mars.drawingx.gadgets.annotations.GadgetDouble;\nimport mars.functions.interfaces.Function0;\n\nimport java.util.List;\n\npublic class TestCSG extends SceneBase {\n\t\n\tpublic static class Factory implements Function0<Scene> {\n\t\t\n\t\t@Override\n\t\tpublic Scene at() {\n\t\t\treturn new TestCSG();\n\t\t}\n\t}\n\t\n\t\n\tpublic TestCSG() {\n\t\t\n\t\t// Bodies\n\t\t\n\t\tSolid solidA = Solid.cube(0.5).transform(Transform.rotationAboutX(0.1).andThen(Transform.rotationAboutY(0.1)));\n\t\tSolid solidB = Ball.cr(Vec3.xyz(0, 0, 0), 0.62);\n\t\tSolid solidC = Ball.cr(Vec3.xyz(0, 0, 0), 0.68);\n\t\tSolid solid = Solid.intersection(Solid.difference(solidA, solidB), solidC);\n\n//\t\tMaterial material = new Material(Color.hsb(60, 0.7, 1), Color.WHITE, 32, Color.BLACK, Color.BLACK, 1);\n\t\tMaterial material = Material.GLASS;\n\t\tbodies.add(Body.uniform(solid, material));\n\n\n\n\t\t\n\t\tbodies.addAll(List.of(\n\t\t\t\tBody.uniform(HalfSpace.pn(Vec3.xyz(-1, 0, 0), Vec3.xyz( 1, 0, 0)), new Material(Color.hsb(  0, 0.7, 0.8))),\n\t\t\t\tBody.uniform(HalfSpace.pn(Vec3.xyz( 1, 0, 0), Vec3.xyz(-1, 0, 0)), new Material(Color.hsb(240, 0.7, 0.8))),\n\t\t\t\tBody.uniform(HalfSpace.pn(Vec3.xyz( 0,-1, 0), Vec3.xyz( 0, 1, 0)), new Material(Color.hsb(  0, 0  , 0.8))),\n\t\t\t\tBody.uniform(HalfSpace.pn(Vec3.xyz( 0, 1, 0), Vec3.xyz( 0,-1, 0)), new Material(Color.hsb(  0, 0  , 0.8))),\n//\t\t        Body.uniform(HalfSpace.pn(Vec3.xyz( 0, 0,-1), Vec3.xyz( 0, 0, 1)), new Material(Color.hsb(  0, 0  , 0.8))),\n\t\t\t\tBody.uniform(HalfSpace.pn(Vec3.xyz( 0, 0, 1), Vec3.xyz( 0, 0,-1)), new Material(Color.hsb(120, 0.7, 0.8)))\n\t\t));\n\t\t\n\t\t\n\t\t// Lights\n\t\t\n\t\tdouble s = 0.6;\n\t\tdouble h = 0.6;\n\t\t\n\t\tlights.addAll(List.of(\n\t\t\t\tLight.pc(Vec3.xyz(-s, h, -s), Color.hsb(0, 0, 1)),\n\t\t\t\tLight.pc(Vec3.xyz(-s, h,  s), Color.hsb(0, 0, 1)),\n\t\t\t\tLight.pc(Vec3.xyz( s, h, -s), Color.hsb(0, 0, 1)),\n\t\t\t\tLight.pc(Vec3.xyz( s, h,  s), Color.hsb(0, 0, 1))\n\t\t));\n\t\t\n\t\t\n\t\t// Camera\n\t\t\n\t\tcameraTransform = Transform.IDENTITY\n\t\t\t\t.andThen(Transform.translation(Vec3.xyz(0, 0, -3)))\n\t\t;\n\t}\n\t\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/graphics3d/scenes/TestCSG.java b/src/graphics3d/scenes/TestCSG.java
--- a/src/graphics3d/scenes/TestCSG.java	(revision 8215f926056dd147e299a2cade457ffb02a660cb)
+++ b/src/graphics3d/scenes/TestCSG.java	(date 1613858182376)
@@ -23,13 +23,15 @@
 		
 		// Bodies
 		
-		Solid solidA = Solid.cube(0.5).transform(Transform.rotationAboutX(0.1).andThen(Transform.rotationAboutY(0.1)));
-		Solid solidB = Ball.cr(Vec3.xyz(0, 0, 0), 0.62);
-		Solid solidC = Ball.cr(Vec3.xyz(0, 0, 0), 0.68);
-		Solid solid = Solid.intersection(Solid.difference(solidA, solidB), solidC);
+		//Solid solidA = Solid.cube(0.5).transform(Transform.rotationAboutX(0.1).andThen(Transform.rotationAboutY(0.1)));
+		//Solid solidB = Ball.cr(Vec3.xyz(-0.3, 0, 0), 0.4);
+		Solid solidC = Ball.cr(Vec3.xyz(0.3, 0, 0), 0.4);
+		Solid solidB=Ball.cr(Vec3.xyz(-0.3,0,0),0.7);
 
-//		Material material = new Material(Color.hsb(60, 0.7, 1), Color.WHITE, 32, Color.BLACK, Color.BLACK, 1);
-		Material material = Material.GLASS;
+		//Solid solid=Solid.difference(solidC,solidB);
+		Solid solid=Solid.union(solidB,solidC);
+		Material material = new Material(Color.hsb(60, 0.7, 1), Color.WHITE, 32, Color.BLACK, Color.BLACK, 1);
+		//Material material = Material.GLASS;
 		bodies.add(Body.uniform(solid, material));
 
 
Index: src/graphics3d/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphics3d;\n\nimport javafx.scene.image.PixelFormat;\nimport javafx.scene.image.WritableImage;\nimport javafx.scene.input.KeyCode;\nimport mars.drawingx.application.DrawingApplication;\nimport mars.drawingx.application.Options;\nimport mars.drawingx.drawing.Drawing;\nimport mars.drawingx.drawing.DrawingUtils;\nimport mars.drawingx.drawing.View;\nimport mars.drawingx.gadgets.annotations.DoNotDetectChanges;\nimport mars.drawingx.gadgets.annotations.GadgetBoolean;\nimport mars.drawingx.gadgets.annotations.RecurseGadgets;\nimport mars.functions.interfaces.Function0;\nimport mars.functions.interfaces.Function2;\nimport mars.geometry.Vector;\nimport mars.input.InputEvent;\nimport mars.input.InputState;\nimport mars.time.Timer;\n\nimport java.nio.IntBuffer;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.stream.IntStream;\n\n\n\npublic class Runner implements Drawing {\n\n\tstatic final Vector imageSize = Vector.xy(640, 640);\n\tstatic final PixelFormat<IntBuffer> pixelFormat = PixelFormat.getIntArgbPreInstance();\n\tstatic final int PARALLELISM = Utils.streaming() ? 2 : ForkJoinPool.getCommonPoolParallelism();  // Reduce parallelism for streaming.\n\t\n\t\n\t@GadgetBoolean\n\t@DoNotDetectChanges\n\tboolean showStats = false;\n\t\n\t\n\t@RecurseGadgets\n\tFunction0<ToneMapper> fToneMapper = new graphics3d.tonemappers.Clamp.Factory();\n\t\n\t@RecurseGadgets\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.TestGammaPattern.Factory();\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.TestGammaGradient.Factory();\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.TestBuffers.Factory();\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.Sonar.Factory();\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.IAmLight.Factory();\n//\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.RayCaster.Factory();\n\tFunction2<Renderer, Scene, Vector> fRenderer = new graphics3d.renderers.RayTracer.Factory();\n\t\n\t@RecurseGadgets\n//\tFunction0<Scene> fScene = new graphics3d.scenes.Test1.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.Room.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.Campfire.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.CampfireGlass.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.Mirrors.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.OrangesGlass.Factory();\n\tFunction0<Scene> fScene = new graphics3d.scenes.OrangesBowling.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.TestTransform.Factory();\n//\tFunction0<Scene> fScene = new graphics3d.scenes.TestCSG.Factory();\n\n\t\n\t\n\tRenderer renderer;\n\tint iterationsRendering;\n\tint iterationsToneMapping;\n\t\n\tTimer timer;\n\tdouble timeLastRender;\n\tboolean shouldResetRenderer = false;\n\t\n\n\t// TripleBuffering\n\n\tTripleBuffering<BufferRendering  > buffersRendering   = new TripleBuffering<>(() -> new BufferRendering  (imageSize));\n\tTripleBuffering<BufferToneMapping> buffersToneMapping = new TripleBuffering<>(() -> new BufferToneMapping(imageSize));\n\t\n\t\n\t\n\t\n\tvoid resetRenderer() {\n\t\trenderer = fRenderer.at(fScene.at(), imageSize);\n\t\titerationsRendering = 0;\n\t\titerationsToneMapping = 0;\n\t\ttimer = new Timer();\n\t\tshouldResetRenderer = false;\n\t}\n\t\n\t\n\tprivate final Object toneMappingMonitor = new Object();\n\t\n\t@Override\n\tpublic void init() {\n\t\tresetRenderer();\n\t\t\n\t\tRunnable rendering = () -> {\n\t\t\ttry {\n\t\t\t\t//noinspection InfiniteLoopStatement\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (shouldResetRenderer) {\n\t\t\t\t\t\tresetRenderer();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbuffersRendering.write(bufferRendering -> {\n\t\t\t\t\t\trenderer.renderIteration(bufferRendering.pixelColors());\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\ttimeLastRender = timer.getTime();\n\t\t\t\t\titerationsRendering++;\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t\t\n\t\tRunnable toneMapping = () -> {\n\t\t\ttry {\n\t\t\t\t//noinspection InfiniteLoopStatement\n\t\t\t\twhile (true) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsynchronized (toneMappingMonitor) {\n\t\t\t\t\t\t\ttoneMappingMonitor.wait();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbuffersRendering.read(bufferRendering -> {\n\t\t\t\t\t\t\tbuffersToneMapping.write(bufferToneMapping -> {\n\t\t\t\t\t\t\t\tfToneMapper.at().toneMap(bufferRendering.pixelColors(), bufferToneMapping.imageData());\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\titerationsToneMapping++;\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t};\n\t\t\n\t\tForkJoinPool pool = new ForkJoinPool(PARALLELISM);\n\t\tpool.submit(rendering);\n\t\tpool.submit(toneMapping);\n\t}\n\t\n\t\n\t@Override\n\tpublic void draw(View view) {\n\t\tdouble time = timer.getTime();\n\t\t\n\t\tDrawingUtils.clear(view, javafx.scene.paint.Color.BLACK);\n\t\t\n\t\tbuffersToneMapping.read(bufferToneMapping -> {\n\t\t\tWritableImage img = new WritableImage(imageSize.xInt(), imageSize.yInt());\n\t\t\timg.getPixelWriter().setPixels(0, 0, imageSize.xInt(), imageSize.yInt(), pixelFormat, bufferToneMapping.imageData(), 0, imageSize.xInt());\n\t\t\tview.drawImageCentered(Vector.ZERO, img);\n\t\t});\n\n\t\tsynchronized (toneMappingMonitor) {\n\t\t\ttoneMappingMonitor.notifyAll();\n\t\t}\n\t\t\n\t\tif (showStats) {\n\t\t\tDrawingUtils.drawInfoText(view,\n\t\t\t\t\tString.format(\"Iterations rendering:     %5d\", iterationsRendering),\n\t\t\t\t\tString.format(\"Iterations tone mapping : %5d\", iterationsToneMapping),\n\t\t\t\t\tString.format(\"Time elapsed: %.3f\", time),\n\t\t\t\t\tString.format(\"Time per iteration rendering: %.3f\", timeLastRender / iterationsRendering)\n\t\t\t);\n\t\t}\n\t}\n\t\n\t\n\t@Override\n\tpublic void receiveEvent(View view, InputEvent event, InputState state, Vector pointerWorld, Vector pointerViewBase) {\n\t\tif (event.isKeyPress(KeyCode.ENTER)) {\n\t\t\tshouldResetRenderer = true;\n\t\t}\n\t}\n\t\n\t\n\t@Override\n\tpublic void valuesChanged() {\n\t\tshouldResetRenderer = true;\n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tOptions options = new Options();\n\t\toptions.drawingSize = Runner.imageSize;\n\t\tDrawingApplication.launch(options);\n\t}\n\t\n}\n\n\nclass BufferRendering {\n\tprivate final Color[][] pixelColors;\n\t\n\t\n\tpublic BufferRendering(Vector size) {\n\t\tpixelColors = new Color[size.yInt()][size.xInt()];\n\t\t\n\t\tIntStream.range(0, size.yInt()).parallel().forEach(y -> {\n\t\t\tfor (int x = 0; x < size.xInt(); x++) {\n\t\t\t\tpixelColors[y][x] = Color.BLACK;\n\t\t\t}\n\t\t});\n\t}\n\t\n\tpublic Color[][] pixelColors() {\n\t\treturn pixelColors;\n\t}\n}\n\n\nclass BufferToneMapping {\n\tprivate final int[] imageData;\n\t\n\tpublic BufferToneMapping(Vector size) {\n\t\timageData = new int[(int) size.area()];\n\t}\n\t\n\tpublic int[] imageData() {\n\t\treturn imageData;\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/graphics3d/Runner.java b/src/graphics3d/Runner.java
--- a/src/graphics3d/Runner.java	(revision 8215f926056dd147e299a2cade457ffb02a660cb)
+++ b/src/graphics3d/Runner.java	(date 1613859875602)
@@ -50,12 +50,12 @@
 	
 	@RecurseGadgets
 //	Function0<Scene> fScene = new graphics3d.scenes.Test1.Factory();
-//	Function0<Scene> fScene = new graphics3d.scenes.Room.Factory();
+	Function0<Scene> fScene = new graphics3d.scenes.Room.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.Campfire.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.CampfireGlass.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.Mirrors.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.OrangesGlass.Factory();
-	Function0<Scene> fScene = new graphics3d.scenes.OrangesBowling.Factory();
+	//Function0<Scene> fScene = new graphics3d.scenes.OrangesBowling.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.TestTransform.Factory();
 //	Function0<Scene> fScene = new graphics3d.scenes.TestCSG.Factory();
 
Index: src/graphics3d/textures/Checkerboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphics3d.textures;\n\nimport graphics3d.Material;\nimport graphics3d.Texture;\nimport mars.geometry.Vector;\n\npublic class Checkerboard implements Texture {\n\t\n\tprivate final Vector size;\n\tprivate final Material material0, material1;\n\t\n\t\n\tpublic Checkerboard(Vector size, Material material0, Material material1) {\n\t\tthis.size = size;\n\t\tthis.material0 = material0;\n\t\tthis.material1 = material1;\n\t}\n\t\n\t@Override\n\tpublic Material materialAt(Vector uv) {\n\t\tVector i = uv.div(size).floor();\n\t\tif ((i.xInt() & 1) == (i.yInt() & 1)) {\n\t\t\treturn material0;\n\t\t} else {\n\t\t\treturn material1;\n\t\t}\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/graphics3d/textures/Checkerboard.java b/src/graphics3d/textures/Checkerboard.java
--- a/src/graphics3d/textures/Checkerboard.java	(revision 8215f926056dd147e299a2cade457ffb02a660cb)
+++ b/src/graphics3d/textures/Checkerboard.java	(date 1613859977546)
@@ -15,11 +15,13 @@
 		this.material0 = material0;
 		this.material1 = material1;
 	}
-	
+
+
+	//
 	@Override
 	public Material materialAt(Vector uv) {
 		Vector i = uv.div(size).floor();
-		if ((i.xInt() & 1) == (i.yInt() & 1)) {
+		if ((i.xInt() & 1) ==(i.yInt() & 1) ) {
 			return material0;
 		} else {
 			return material1;
